"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require("babel-runtime/helpers/get");

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _dedupe = require("classnames/dedupe");

var _dedupe2 = _interopRequireDefault(_dedupe);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _FieldRadioButton2 = require("./FieldRadioButton");

var _FieldRadioButton3 = _interopRequireDefault(_FieldRadioButton2);

var _Util = require("../Util/Util");

var _Util2 = _interopRequireDefault(_Util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FieldCheckbox = function (_FieldRadioButton) {
  (0, _inherits3.default)(FieldCheckbox, _FieldRadioButton);

  function FieldCheckbox() {
    (0, _classCallCheck3.default)(this, FieldCheckbox);

    var _this = (0, _possibleConstructorReturn3.default)(this, (FieldCheckbox.__proto__ || (0, _getPrototypeOf2.default)(FieldCheckbox)).apply(this, arguments));

    _this.refElements = {};
    return _this;
  }

  (0, _createClass3.default)(FieldCheckbox, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      (0, _get3.default)(FieldCheckbox.prototype.__proto__ || (0, _getPrototypeOf2.default)(FieldCheckbox.prototype), "componentDidMount", this).apply(this, arguments);
      this.updateCheckbox();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      (0, _get3.default)(FieldCheckbox.prototype.__proto__ || (0, _getPrototypeOf2.default)(FieldCheckbox.prototype), "componentDidUpdate", this).apply(this, arguments);
      this.updateCheckbox();
    }
  }, {
    key: "updateCheckbox",
    value: function updateCheckbox() {
      var props = this.props,
          refElements = this.refElements;

      (0, _keys2.default)(refElements).forEach(function (refName) {
        var checkbox = _reactDom2.default.findDOMNode(refElements[refName]);
        var indeterminate = void 0;
        // Single checkbox
        if (props.name === refName) {
          indeterminate = props.indeterminate;
        }

        // Multiple checkboxes
        if (_Util2.default.isArray(props.startValue)) {
          indeterminate = _Util2.default.find(props.startValue, function (item) {
            return item.name === refName;
          }).indeterminate;
        }

        if (indeterminate != null) {
          checkbox.indeterminate = indeterminate;
        }
      });
    }
  }, {
    key: "handleChange",
    value: function handleChange(eventName, name, event) {
      var props = this.props;


      if (eventName === "multipleChange") {
        props.handleEvent(eventName, props.name, { name: name, checked: event.target.checked }, event);
      }

      if (eventName === "change") {
        props.handleEvent(eventName, props.name, event.target.checked, event);
      }
    }
  }, {
    key: "getItemLabel",
    value: function getItemLabel(attributes) {
      if (!attributes.label) {
        return null;
      }

      var checkboxLabelClass = (0, _dedupe2.default)("form-element-checkbox-label", attributes.checkboxLabelClass, this.props.checkboxLabelClass);

      return _react2.default.createElement(
        "span",
        { className: checkboxLabelClass },
        attributes.label
      );
    }
  }, {
    key: "getItem",
    value: function getItem(eventName, labelClass, attributes, index) {
      var _this2 = this;

      var labelClasses = (0, _dedupe2.default)("form-control-toggle form-control-toggle-custom", labelClass, { mute: attributes.disabled }, attributes.labelClass);

      var indicatorClasses = (0, _dedupe2.default)("form-control-toggle-indicator", attributes.indicatorClass);

      var htmlAttributes = _Util2.default.pick(attributes, ["checked", "className", "disabled", "name"]);

      return _react2.default.createElement(
        "label",
        { className: labelClasses, key: index },
        _react2.default.createElement("input", (0, _extends3.default)({
          onChange: this.handleChange.bind(this, eventName, attributes.name),
          ref: function ref(el) {
            return _this2.refElements[attributes.name] = el;
          },
          type: "checkbox"
        }, htmlAttributes)),
        _react2.default.createElement("span", { className: indicatorClasses }),
        this.getItemLabel(attributes)
      );
    }
  }, {
    key: "getRowClass",
    value: function getRowClass() {
      var _props = this.props,
          columnWidth = _props.columnWidth,
          formElementClass = _props.formElementClass;


      return (0, _dedupe2.default)("form-row-element column-" + columnWidth, formElementClass);
    }
  }]);
  return FieldCheckbox;
}(_FieldRadioButton3.default);

FieldCheckbox.defaultProps = {
  columnWidth: 12,
  handleEvent: function handleEvent() {}
};

FieldCheckbox.propTypes = {
  // Optional number of columns to take up of the grid
  columnWidth: _propTypes2.default.number.isRequired,
  // Function to handle change event
  // (usually passed down from form definition)
  handleEvent: _propTypes2.default.func,
  // Optional boolean, string, or react node.
  // If boolean: true - shows name as label; false - shows nothing.
  // If string: shows string as label.
  // If node: returns the node as the label.
  showLabel: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string, _propTypes2.default.bool]),
  // Optional object of error messages, with key equal to field property name
  validationError: _propTypes2.default.object,

  // Classes
  checkboxButtonLabelClass: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object, _propTypes2.default.string]),
  startValue: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.bool]),
  labelClass: _propTypes2.default.string,
  indicatorClasses: _propTypes2.default.string,
  indeterminate: _propTypes2.default.bool
};

module.exports = FieldCheckbox;