"use strict";

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _dedupe = require("classnames/dedupe");

var _dedupe2 = _interopRequireDefault(_dedupe);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _BindMixin = require("../Mixin/BindMixin");

var _BindMixin2 = _interopRequireDefault(_BindMixin);

var _IconEdit = require("./icons/IconEdit");

var _IconEdit2 = _interopRequireDefault(_IconEdit);

var _KeyboardUtil = require("../Util/KeyboardUtil");

var _KeyboardUtil2 = _interopRequireDefault(_KeyboardUtil);

var _Util = require("../Util/Util");

var _Util2 = _interopRequireDefault(_Util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EVENTS = ["blur", "change", "focus"];

var FieldInput = function (_Util$mixin) {
  (0, _inherits3.default)(FieldInput, _Util$mixin);

  function FieldInput() {
    (0, _classCallCheck3.default)(this, FieldInput);

    var _this = (0, _possibleConstructorReturn3.default)(this, (FieldInput.__proto__ || (0, _getPrototypeOf2.default)(FieldInput)).apply(this, arguments));

    _this.inputElementRef = _react2.default.createRef();
    return _this;
  }

  (0, _createClass3.default)(FieldInput, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return !_Util2.default.isEqual(this.props, nextProps);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var inputElement = _reactDom2.default.findDOMNode(this.inputElementRef.current);

      if (this.isEditing() && inputElement !== global.document.activeElement) {
        inputElement.focus();
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var inputElement = _reactDom2.default.findDOMNode(this.inputElementRef.current);
      if (inputElement != null && inputElement.type === "text" && this.props.focused) {
        // Don't interfere with existing transitions
        setTimeout(function () {
          var valueLength = inputElement.value.length;
          inputElement.focus();
          inputElement.setSelectionRange(valueLength, valueLength);
        }, 0);
      }
    }
  }, {
    key: "bindEvents",
    value: function bindEvents(attributes) {
      var _this2 = this;

      EVENTS.forEach(function (event) {
        var htmlEvent = "on" + _Util2.default.capitalize(event);
        attributes[htmlEvent] = _this2.handleEvent.bind(_this2, event);
      });

      return attributes;
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(event, eventObj) {
      var props = this.props;

      props.handleEvent(event, props.name, eventObj.target.value, eventObj);
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var props = this.props;
      // Force a blur on enter, which will trigger onBlur.

      if (event.key === _KeyboardUtil2.default.keys.enter) {
        if (props.writeType === "input") {
          props.handleSubmit();
        }

        var inputNode = _reactDom2.default.findDOMNode(this.inputElementRef.current);

        if (inputNode) {
          inputNode.blur();
        }
      }
    }
  }, {
    key: "hasError",
    value: function hasError() {
      var props = this.props;

      var validationError = props.validationError;

      return !!(validationError && validationError[props.name]);
    }
  }, {
    key: "isEditing",
    value: function isEditing() {
      var props = this.props;


      return props.editing === props.name && props.writeType === "edit";
    }
  }, {
    key: "getRowClass",
    value: function getRowClass(props) {
      return (0, _dedupe2.default)("form-row-element column-" + props.columnWidth, props.formElementClass, {
        "form-row-edit": this.isEditing(),
        "form-row-input": props.writeType === "input",
        "form-row-read": !this.isEditing() && props.writeType === "edit"
      });
    }
  }, {
    key: "getErrorMsg",
    value: function getErrorMsg() {
      var errorMsg = null;
      var props = this.props;


      if (this.hasError()) {
        errorMsg = _react2.default.createElement(
          "p",
          { className: (0, _dedupe2.default)(props.helpBlockClass) },
          props.validationError[props.name]
        );
      }

      return errorMsg;
    }
  }, {
    key: "getHelpBlock",
    value: function getHelpBlock() {
      var _props = this.props,
          helpBlock = _props.helpBlock,
          helpBlockClass = _props.helpBlockClass;


      if (!helpBlock) {
        return null;
      }

      return _react2.default.createElement(
        "span",
        { className: (0, _dedupe2.default)(helpBlockClass) },
        helpBlock
      );
    }
  }, {
    key: "getLabel",
    value: function getLabel() {
      var _props2 = this.props,
          labelClass = _props2.labelClass,
          name = _props2.name,
          showLabel = _props2.showLabel;

      var contents = name;

      if (!showLabel) {
        return null;
      }

      if (typeof showLabel === "string") {
        contents = showLabel;
      }

      if (typeof showLabel !== "string" && showLabel !== true) {
        return showLabel;
      }

      return _react2.default.createElement(
        "label",
        { className: (0, _dedupe2.default)(labelClass) },
        contents
      );
    }
  }, {
    key: "getInputElement",
    value: function getInputElement(attributes) {
      var _props3 = this.props,
          inlineIconClass = _props3.inlineIconClass,
          inlineTextClass = _props3.inlineTextClass,
          inputClass = _props3.inputClass,
          renderer = _props3.renderer,
          sharedClass = _props3.sharedClass,
          value = _props3.value,
          writeType = _props3.writeType,
          fieldType = _props3.fieldType;

      var inputContent = null;

      var classes = (0, _dedupe2.default)(inputClass, sharedClass);
      attributes = this.bindEvents(attributes);

      var htmlAttributes = _Util2.default.exclude(attributes, (0, _keys2.default)(FieldInput.propTypes));

      if (this.isEditing() || writeType === "input") {
        inputContent = _react2.default.createElement("input", (0, _extends3.default)({
          ref: this.inputElementRef,
          className: classes,
          onKeyDown: this.handleKeyDown.bind(this),
          name: attributes.name,
          value: attributes.startValue,
          lang: fieldType === "number" ? navigator.language : null
        }, htmlAttributes));
      } else {
        inputContent = _react2.default.createElement(
          "span",
          (0, _extends3.default)({
            ref: this.inputElementRef
          }, htmlAttributes, {
            className: classes,
            onClick: attributes.onFocus
          }),
          _react2.default.createElement(
            "span",
            { className: (0, _dedupe2.default)(inlineTextClass) },
            value || attributes.startValue
          ),
          _react2.default.createElement(
            "span",
            { className: (0, _dedupe2.default)(inlineIconClass) },
            _react2.default.createElement(_IconEdit2.default, null)
          )
        );
      }

      if (renderer) {
        return renderer(inputContent);
      }

      return inputContent;
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;


      var attributes = _Util2.default.exclude(props, "onChange", "value");

      var classes = (0, _dedupe2.default)((0, _defineProperty3.default)({}, props.formGroupErrorClass, this.hasError()), props.formGroupClass);

      return _react2.default.createElement(
        "div",
        { className: this.getRowClass(props) },
        _react2.default.createElement(
          "div",
          { className: classes },
          this.getLabel(),
          this.getInputElement(attributes),
          this.getHelpBlock(),
          this.getErrorMsg()
        )
      );
    }
  }]);
  return FieldInput;
}(_Util2.default.mixin(_BindMixin2.default));

FieldInput.defaultProps = {
  columnWidth: 12,
  handleEvent: function handleEvent() {},

  value: "",
  writeType: "input"
};

var classPropType = _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object, _propTypes2.default.string]);

FieldInput.propTypes = {
  // Number of columns to take up of the grid
  columnWidth: _propTypes2.default.number.isRequired,
  // Optional. Which field property is currently being edited
  // (usually passed down from form definition)
  editing: _propTypes2.default.string,
  // Optional. Specify if the field should be focused
  // Useful in combination with preset values, will set cursor to end of input
  // (usually passed down from form definition)
  focused: _propTypes2.default.bool,
  // Function to handle when form is submitted
  // (usually passed down from form definition)
  handleSubmit: _propTypes2.default.func,
  // Function to handle events like 'change', 'blur', 'focus', etc on the field
  // (usually passed down from form definition)
  handleEvent: _propTypes2.default.func,
  // Optional label to add
  label: _propTypes2.default.string,
  // Optional help block
  helpBlock: _propTypes2.default.node,
  // Name of the field property
  // (usually passed down from form definition)
  name: _propTypes2.default.string.isRequired,
  // Custom render function, receives the input element as its only argument
  renderer: _propTypes2.default.func,
  // Optional boolean, string, or react node.
  // If boolean: true - shows name as label; false - shows nothing.
  // If string: shows string as label.
  // If node: returns the node as the label.
  showLabel: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string, _propTypes2.default.bool]),
  // initial value of field
  startValue: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]),
  // Optional object of error messages, with key equal to field property name
  validationError: _propTypes2.default.object,
  // Optional value of the field
  value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]),
  // Optional field to set input to 'edit' or 'input' mode
  writeType: _propTypes2.default.string,

  // Classes
  formElementClass: classPropType,
  formGroupClass: classPropType,
  // Class to be toggled, can be overridden by formGroupClass
  formGroupErrorClass: _propTypes2.default.string,
  helpBlockClass: classPropType,
  inlineIconClass: classPropType,
  inlineTextClass: classPropType,
  labelClass: classPropType,
  sharedClass: classPropType,
  fieldType: _propTypes2.default.string,
  currentValue: _propTypes2.default.object,
  maxColumnWidth: _propTypes2.default.number,
  formRowClass: _propTypes2.default.string,
  inputClass: _propTypes2.default.string,
  readClass: _propTypes2.default.string,
  validation: _propTypes2.default.func,
  validationErrorText: _propTypes2.default.string,
  showError: _propTypes2.default.string,
  errorText: _propTypes2.default.string
};

module.exports = FieldInput;