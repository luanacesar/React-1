"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _dedupe = require("classnames/dedupe");

var _dedupe2 = _interopRequireDefault(_dedupe);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _FieldInput2 = require("./FieldInput");

var _FieldInput3 = _interopRequireDefault(_FieldInput2);

var _IconEdit = require("./icons/IconEdit");

var _IconEdit2 = _interopRequireDefault(_IconEdit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-enable no-unused-vars */

var METHODS_TO_BIND = ["handleOnBlur", "handleOnFocus"];
/* eslint-disable no-unused-vars */

var FieldPassword = function (_FieldInput) {
  (0, _inherits3.default)(FieldPassword, _FieldInput);

  function FieldPassword() {
    (0, _classCallCheck3.default)(this, FieldPassword);

    var _this = (0, _possibleConstructorReturn3.default)(this, (FieldPassword.__proto__ || (0, _getPrototypeOf2.default)(FieldPassword)).call(this));

    METHODS_TO_BIND.forEach(function (method) {
      _this[method] = _this[method].bind(_this);
    });
    return _this;
  }

  (0, _createClass3.default)(FieldPassword, [{
    key: "handleOnBlur",
    value: function handleOnBlur(event) {
      if (this.focused) {
        this.focused = false;
        this.forceUpdate();
      }

      this.props.handleEvent("blur", this.props.name, event.target.value, event);
    }
  }, {
    key: "handleOnFocus",
    value: function handleOnFocus(event) {
      if (!this.focused) {
        this.focused = true;
        this.forceUpdate();
      }

      this.props.handleEvent("focus", this.props.name, event.target.value, event);
    }
  }, {
    key: "getInputElement",
    value: function getInputElement(attributes) {
      var _props = this.props,
          handleEvent = _props.handleEvent,
          inlineIconClass = _props.inlineIconClass,
          inlineTextClass = _props.inlineTextClass,
          inputClass = _props.inputClass,
          renderer = _props.renderer,
          sharedClass = _props.sharedClass,
          writeType = _props.writeType;


      var classes = (0, _dedupe2.default)(inputClass, sharedClass);
      var inputContent = null;
      attributes = this.bindEvents(attributes, handleEvent);
      attributes.onBlur = this.handleOnBlur;
      attributes.onFocus = this.handleOnFocus;

      var fieldValue = attributes.defaultPasswordValue || attributes.startValue || "";

      if (this.focused) {
        fieldValue = attributes.startValue;
      }

      if (this.isEditing() || writeType === "input") {
        inputContent = _react2.default.createElement("input", (0, _extends3.default)({}, attributes, {
          ref: "inputElement",
          className: classes,
          onKeyDown: this.handleKeyDown.bind(this),
          value: fieldValue
        }));
      } else {
        inputContent = _react2.default.createElement(
          "span",
          (0, _extends3.default)({
            ref: "inputElement"
          }, attributes, {
            className: classes,
            onClick: attributes.onFocus
          }),
          _react2.default.createElement(
            "span",
            { className: (0, _dedupe2.default)(inlineTextClass) },
            attributes.defaultPasswordValue
          ),
          _react2.default.createElement(
            "span",
            { className: (0, _dedupe2.default)(inlineIconClass) },
            _react2.default.createElement(_IconEdit2.default, null)
          )
        );
      }

      if (renderer) {
        return renderer(inputContent);
      }

      return inputContent;
    }
  }]);
  return FieldPassword;
}(_FieldInput3.default);

module.exports = FieldPassword;