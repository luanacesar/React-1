"use strict";

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _dedupe = require("classnames/dedupe");

var _dedupe2 = _interopRequireDefault(_dedupe);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _BindMixin = require("../Mixin/BindMixin");

var _BindMixin2 = _interopRequireDefault(_BindMixin);

var _Util = require("../Util/Util");

var _Util2 = _interopRequireDefault(_Util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FieldRadioButton = function (_Util$mixin) {
  (0, _inherits3.default)(FieldRadioButton, _Util$mixin);

  function FieldRadioButton() {
    (0, _classCallCheck3.default)(this, FieldRadioButton);
    return (0, _possibleConstructorReturn3.default)(this, (FieldRadioButton.__proto__ || (0, _getPrototypeOf2.default)(FieldRadioButton)).apply(this, arguments));
  }

  (0, _createClass3.default)(FieldRadioButton, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return !_Util2.default.isEqual(this.props, nextProps);
    }
  }, {
    key: "hasError",
    value: function hasError() {
      var props = this.props;

      var validationError = props.validationError;

      return !!(validationError && validationError[props.name]);
    }
  }, {
    key: "getErrorMsg",
    value: function getErrorMsg() {
      var _props = this.props,
          helpBlockClass = _props.helpBlockClass,
          name = _props.name,
          validationError = _props.validationError;


      if (!this.hasError()) {
        return null;
      }

      return _react2.default.createElement(
        "p",
        { className: (0, _dedupe2.default)(helpBlockClass) },
        validationError[name]
      );
    }
  }, {
    key: "handleChange",
    value: function handleChange(eventName, name, event) {
      var props = this.props;


      if (eventName === "multipleChange") {
        var model = props.startValue.reduce(function (changedItems, item) {
          if (item.checked && item.name !== name) {
            item.checked = false;
            changedItems.push(item);
          }

          return changedItems;
        }, [{ name: name, checked: event.target.checked }]);

        props.handleEvent(eventName, props.name, model, event);
      }

      if (eventName === "change") {
        props.handleEvent(eventName, props.name, event.target.checked, event);
      }
    }
  }, {
    key: "getLabel",
    value: function getLabel() {
      var _props2 = this.props,
          showLabel = _props2.showLabel,
          name = _props2.name;

      var label = name;

      if (!showLabel) {
        return null;
      }

      if (typeof showLabel === "string") {
        label = showLabel;
      }

      if (typeof showLabel !== "string" && showLabel !== true) {
        return showLabel;
      }

      return _react2.default.createElement(
        "p",
        null,
        label
      );
    }
  }, {
    key: "getItemLabel",
    value: function getItemLabel(attributes) {
      if (!attributes.label) {
        return null;
      }

      var radioButtonLabelClass = (0, _dedupe2.default)("form-element-radio-button-label", attributes.radioButtonLabelClass, this.props.radioButtonLabelClass);

      return _react2.default.createElement(
        "span",
        { className: radioButtonLabelClass },
        attributes.label
      );
    }
  }, {
    key: "getItem",
    value: function getItem(eventName, labelClass, attributes, index) {
      var labelClasses = (0, _dedupe2.default)("form-control-toggle form-control-toggle-custom", labelClass, { mute: attributes.disabled }, attributes.labelClass);

      var indicatorClasses = (0, _dedupe2.default)("form-control-toggle-indicator", attributes.indicatorClass);

      var htmlAttributes = _Util2.default.exclude(attributes, (0, _keys2.default)(FieldRadioButton.propTypes));

      return _react2.default.createElement(
        "label",
        { className: labelClasses, key: index },
        _react2.default.createElement("input", (0, _extends3.default)({
          onChange: this.handleChange.bind(this, eventName, attributes.name),
          type: "radio"
        }, htmlAttributes)),
        _react2.default.createElement("span", { className: indicatorClasses }),
        this.getItemLabel(attributes)
      );
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var _props3 = this.props,
          labelClass = _props3.labelClass,
          startValue = _props3.startValue;


      if (!_Util2.default.isArray(startValue)) {
        // Fetch other attributes from props
        var value = {};
        if (startValue != null) {
          value.checked = startValue;
        }
        var model = _Util2.default.extend({}, this.props, value);

        return this.getItem("change", labelClass, model, 0);
      }

      return startValue.map(this.getItem.bind(this, "multipleChange", labelClass));
    }
  }, {
    key: "getRowClass",
    value: function getRowClass() {
      var _props4 = this.props,
          columnWidth = _props4.columnWidth,
          formElementClass = _props4.formElementClass;


      return (0, _dedupe2.default)("form-row-element column-" + columnWidth, formElementClass);
    }
  }, {
    key: "render",
    value: function render() {
      var _props5 = this.props,
          formGroupClass = _props5.formGroupClass,
          formGroupErrorClass = _props5.formGroupErrorClass,
          itemWrapperClass = _props5.itemWrapperClass;


      var classes = (0, _dedupe2.default)((0, _defineProperty3.default)({}, formGroupErrorClass, this.hasError()), formGroupClass);

      return _react2.default.createElement(
        "div",
        { className: this.getRowClass() },
        _react2.default.createElement(
          "div",
          { className: classes },
          this.getLabel(),
          _react2.default.createElement(
            "div",
            { className: (0, _dedupe2.default)(itemWrapperClass) },
            this.getItems()
          ),
          this.getErrorMsg()
        )
      );
    }
  }, {
    key: "methodsToBind",
    get: function get() {
      return ["handleChange"];
    }
  }]);
  return FieldRadioButton;
}(_Util2.default.mixin(_BindMixin2.default));

FieldRadioButton.defaultProps = {
  columnWidth: 12,
  handleEvent: function handleEvent() {}
};

var classPropType = _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object, _propTypes2.default.string]);

FieldRadioButton.propTypes = {
  // Optional number of columns to take up of the grid
  columnWidth: _propTypes2.default.number.isRequired,
  // Function to handle change event
  // (usually passed down from form definition)
  handleEvent: _propTypes2.default.func,
  // Optional boolean, string, or react node.
  // If boolean: true - shows name as label; false - shows nothing.
  // If string: shows string as label.
  // If node: returns the node as the label.
  showLabel: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string, _propTypes2.default.bool]),
  // Attributes to pass to radio button(s)
  // (usually passed down from form definition)
  startValue: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.bool]),
  // Optional object of error messages, with key equal to field property name
  validationError: _propTypes2.default.object,

  // Classes
  formElementClass: classPropType,
  formGroupClass: classPropType,
  // Class to be toggled, can be overridden by formGroupClass
  formGroupErrorClass: _propTypes2.default.string,
  helpBlockClass: classPropType,
  itemWrapperClass: classPropType,
  labelClass: classPropType,
  radioButtonLabelClass: classPropType
};

module.exports = FieldRadioButton;