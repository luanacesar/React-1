"use strict";

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _dedupe = require("classnames/dedupe");

var _dedupe2 = _interopRequireDefault(_dedupe);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Dropdown = require("../Dropdown/Dropdown");

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _Util = require("../Util/Util");

var _Util2 = _interopRequireDefault(_Util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FieldSelect = function (_React$Component) {
  (0, _inherits3.default)(FieldSelect, _React$Component);

  function FieldSelect() {
    (0, _classCallCheck3.default)(this, FieldSelect);
    return (0, _possibleConstructorReturn3.default)(this, (FieldSelect.__proto__ || (0, _getPrototypeOf2.default)(FieldSelect)).apply(this, arguments));
  }

  (0, _createClass3.default)(FieldSelect, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return !_Util2.default.isEqual(this.props, nextProps);
    }
  }, {
    key: "handleChange",
    value: function handleChange(selectedValue, event) {
      this.props.handleEvent("change", this.props.name, selectedValue.id, event, selectedValue);
    }
  }, {
    key: "hasError",
    value: function hasError() {
      var props = this.props;

      var validationError = props.validationError;

      return !!(validationError && validationError[props.name]);
    }
  }, {
    key: "getDropDown",
    value: function getDropDown(dropdownItems) {
      var _this2 = this;

      var _props = this.props,
          startValue = _props.startValue,
          persistentID = _props.persistentID;


      var classes = {
        buttonClassName: "button dropdown-toggle",
        dropdownMenuClassName: "dropdown-menu",
        dropdownMenuListClassName: "dropdown-menu-list",
        wrapperClassName: "dropdown"
      };

      var propagatedProps = _Util2.default.exclude(this.props, [].concat((0, _toConsumableArray3.default)((0, _keys2.default)(classes)), ["persistentID", "startValue"]));

      classes = (0, _keys2.default)(classes).reduce(function (classSet, className) {
        classSet[className] = (0, _dedupe2.default)(classes[className], _this2.props[className]);

        return classSet;
      }, classes);

      if (startValue == null) {
        startValue = dropdownItems[0];
      }

      if (typeof startValue === "string") {
        // Try to find id in dropdown items
        var existingOption = dropdownItems.reduce(function (memo, option) {
          if ((typeof option === "undefined" ? "undefined" : (0, _typeof3.default)(option)) === "object") {
            if (option.id === startValue) {
              memo = option;
            }
          }

          return memo;
        }, null);

        if (existingOption) {
          startValue = existingOption;
        } else {
          startValue = {
            html: startValue,
            id: startValue
          };
        }
      }

      return _react2.default.createElement(_Dropdown2.default, (0, _extends3.default)({}, propagatedProps, classes, {
        initialID: startValue.id,
        items: dropdownItems,
        onItemSelection: this.handleChange.bind(this),
        persistentID: persistentID,
        transition: true
      }));
    }
  }, {
    key: "getErrorMsg",
    value: function getErrorMsg() {
      var errorMsg = null;
      var props = this.props;


      if (this.hasError()) {
        errorMsg = _react2.default.createElement(
          "p",
          { className: (0, _dedupe2.default)(props.helpBlockClass) },
          props.validationError[props.name]
        );
      }

      return errorMsg;
    }
  }, {
    key: "getLabel",
    value: function getLabel() {
      var _props2 = this.props,
          label = _props2.label,
          showLabel = _props2.showLabel;


      if (!showLabel) {
        return null;
      }

      if (typeof showLabel === "string") {
        label = showLabel;
      }

      if (typeof showLabel !== "string" && showLabel !== true) {
        return showLabel;
      }

      return _react2.default.createElement(
        "label",
        null,
        label
      );
    }
  }, {
    key: "render",
    value: function render() {
      var _props3 = this.props,
          columnWidth = _props3.columnWidth,
          formGroupClass = _props3.formGroupClass,
          formElementClass = _props3.formElementClass,
          formGroupErrorClass = _props3.formGroupErrorClass,
          options = _props3.options;


      options = options.map(function (option) {
        if (typeof option === "string") {
          return {
            html: option,
            id: option
          };
        }

        return option;
      });

      var classes = (0, _dedupe2.default)((0, _defineProperty3.default)({}, formGroupErrorClass, this.hasError()), formGroupClass);

      var rowClass = (0, _dedupe2.default)("form-row-element", "column-" + columnWidth, formElementClass);

      return _react2.default.createElement(
        "div",
        { className: rowClass },
        _react2.default.createElement(
          "div",
          { className: classes },
          this.getLabel(),
          this.getDropDown(options),
          this.getErrorMsg()
        )
      );
    }
  }]);
  return FieldSelect;
}(_react2.default.Component);

FieldSelect.defaultProps = {
  columnWidth: 12,
  handleEvent: function handleEvent() {}
};

var classPropType = _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object, _propTypes2.default.string]);

FieldSelect.propTypes = {
  // Optional number of columns to take up of the grid
  columnWidth: _propTypes2.default.number.isRequired,

  // Name of the field property
  // (usually passed down from form definition)
  name: _propTypes2.default.string.isRequired,
  // Optional boolean, string, or react node.
  // If boolean: true - shows name as label; false - shows nothing.
  // If string: shows string as label.
  // If node: returns the node as the label.
  showLabel: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string, _propTypes2.default.bool]),

  // Function to handle events like 'change', 'blur', 'focus', etc on the field
  // (usually passed down from form definition)
  handleEvent: _propTypes2.default.func,

  // These are the options for the DropDown Component
  options: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
    html: _propTypes2.default.node,
    id: _propTypes2.default.string
  })])).isRequired,
  startValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
    html: _propTypes2.default.node,
    id: _propTypes2.default.string
  })]),
  persisitentID: _propTypes2.default.string,

  // Optional object of error messages, with key equal to field property name
  validationError: _propTypes2.default.object,

  // Classes
  formGroupClass: classPropType,
  // Class to be toggled, can be overridden by formGroupClass
  formGroupErrorClass: _propTypes2.default.string,
  helpBlockClass: classPropType,
  formElementClass: classPropType,

  // Classes for the Dropdown
  buttonClassName: classPropType,
  dropdownMenuClassName: classPropType,
  dropdownMenuListClassName: classPropType,
  wrapperClassName: classPropType
};

module.exports = FieldSelect;