"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require("babel-runtime/helpers/get");

var _get3 = _interopRequireDefault(_get2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _dedupe = require("classnames/dedupe");

var _dedupe2 = _interopRequireDefault(_dedupe);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lodash = require("lodash.throttle");

var _lodash2 = _interopRequireDefault(_lodash);

var _FieldInput2 = require("./FieldInput");

var _FieldInput3 = _interopRequireDefault(_FieldInput2);

var _IconEdit = require("./icons/IconEdit");

var _IconEdit2 = _interopRequireDefault(_IconEdit);

var _Util = require("../Util/Util");

var _Util2 = _interopRequireDefault(_Util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-enable no-unused-vars */

/* eslint-disable no-unused-vars */
var FieldTextarea = function (_FieldInput) {
  (0, _inherits3.default)(FieldTextarea, _FieldInput);
  (0, _createClass3.default)(FieldTextarea, [{
    key: "methodsToBind",
    get: function get() {
      return ["handleContentEditableBlur", "handleContentEditableChange", "handleContentEditableFocus"];
    }
  }]);

  function FieldTextarea() {
    (0, _classCallCheck3.default)(this, FieldTextarea);

    var _this = (0, _possibleConstructorReturn3.default)(this, (FieldTextarea.__proto__ || (0, _getPrototypeOf2.default)(FieldTextarea)).apply(this, arguments));

    _this.state = { height: _this.props.minHeight };
    _this.updateTextareaHeight = (0, _lodash2.default)(_this.updateTextareaHeight, 100);

    _this.inputElementRef = _react2.default.createRef();
    return _this;
  }

  (0, _createClass3.default)(FieldTextarea, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      (0, _get3.default)(FieldTextarea.prototype.__proto__ || (0, _getPrototypeOf2.default)(FieldTextarea.prototype), "componentDidMount", this).apply(this, arguments);

      if (!this.inputElementRef && !this.inputElementRef.current) {
        return;
      }

      if (this.isEditing() || this.props.writeType === "input") {
        this.updateTextareaHeight(this.inputElementRef.current);

        // React throws a warning if children are specified in an element with
        // contenteditable="true", so this hack allows us to set a default value
        // for this form field.
        if (this.props.startValue) {
          this.inputElementRef.current.textContent = this.props.startValue;
        }
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !_Util2.default.isEqual(this.props, nextProps) || !_Util2.default.isEqual(this.state, nextState);
    }
  }, {
    key: "handleContentEditableBlur",
    value: function handleContentEditableBlur(event) {
      var props = this.props;

      props.handleEvent("blur", props.name, event.target.innerText, event);
    }
  }, {
    key: "handleContentEditableChange",
    value: function handleContentEditableChange(event) {
      var props = this.props;


      this.updateTextareaHeight(event.target);
      props.handleEvent("change", props.name, event.target.innerText, event);
    }
  }, {
    key: "handleContentEditableFocus",
    value: function handleContentEditableFocus(event) {
      var props = this.props;

      props.handleEvent("focus", props.name, event.target.innerText, event);
    }
  }, {
    key: "getInputElement",
    value: function getInputElement(attributes) {
      var _props = this.props,
          inlineIconClass = _props.inlineIconClass,
          inlineTextClass = _props.inlineTextClass,
          inputClass = _props.inputClass,
          minHeight = _props.minHeight,
          renderer = _props.renderer,
          sharedClass = _props.sharedClass,
          value = _props.value,
          writeType = _props.writeType;

      var inputContent = null;

      var classes = (0, _dedupe2.default)("content-editable", inputClass, sharedClass);

      attributes = this.bindEvents(attributes);

      if (this.isEditing() || writeType === "input") {
        inputContent = _react2.default.createElement(
          "div",
          {
            className: "content-editable-wrapper",
            style: { height: this.state.height + "px" }
          },
          _react2.default.createElement("div", (0, _extends3.default)({
            ref: this.inputElementRef,
            className: classes
          }, attributes, {
            contentEditable: true,
            onBlur: this.handleContentEditableBlur,
            onFocus: this.handleContentEditableFocus,
            onInput: this.handleContentEditableChange,
            style: { minHeight: minHeight + "px" }
          }))
        );
      } else {
        inputContent = _react2.default.createElement(
          "span",
          (0, _extends3.default)({
            ref: this.inputElementRef
          }, attributes, {
            className: classes,
            onClick: attributes.onFocus
          }),
          _react2.default.createElement(
            "span",
            { className: (0, _dedupe2.default)(inlineTextClass) },
            value || attributes.startValue
          ),
          _react2.default.createElement(
            "span",
            { className: (0, _dedupe2.default)(inlineIconClass) },
            _react2.default.createElement(_IconEdit2.default, null)
          )
        );
      }

      if (renderer) {
        return renderer(inputContent);
      }

      return inputContent;
    }
  }, {
    key: "updateTextareaHeight",
    value: function updateTextareaHeight(domElement) {
      var _props2 = this.props,
          minHeight = _props2.minHeight,
          maxHeight = _props2.maxHeight,
          scrollHeightOffset = _props2.scrollHeightOffset;

      var newHeight = minHeight;
      var scrollHeight = domElement.scrollHeight;


      if (scrollHeight > minHeight && scrollHeight < maxHeight) {
        newHeight = scrollHeight + scrollHeightOffset;
      } else if (scrollHeight >= maxHeight) {
        newHeight = maxHeight;
      }

      if (newHeight !== this.state.height) {
        this.setState({ height: newHeight });
      }
    }
  }]);
  return FieldTextarea;
}(_FieldInput3.default);

FieldTextarea.defaultProps = {
  maxHeight: 400,
  minHeight: 100,
  scrollHeightOffset: 2
};

FieldTextarea.propTypes = {
  maxHeight: _propTypes2.default.number,
  minHeight: _propTypes2.default.number,
  scrollHeightOffset: _propTypes2.default.number
};

module.exports = FieldTextarea;