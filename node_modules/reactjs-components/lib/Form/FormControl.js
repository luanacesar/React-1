"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _dedupe = require("classnames/dedupe");

var _dedupe2 = _interopRequireDefault(_dedupe);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _FieldTypes = require("./FieldTypes");

var _FieldTypes2 = _interopRequireDefault(_FieldTypes);

var _Util = require("../Util/Util");

var _Util2 = _interopRequireDefault(_Util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FormControl = function (_React$Component) {
  (0, _inherits3.default)(FormControl, _React$Component);

  function FormControl() {
    (0, _classCallCheck3.default)(this, FormControl);
    return (0, _possibleConstructorReturn3.default)(this, (FormControl.__proto__ || (0, _getPrototypeOf2.default)(FormControl)).apply(this, arguments));
  }

  (0, _createClass3.default)(FormControl, [{
    key: "renderGroup",
    value: function renderGroup(definition) {
      var _this2 = this;

      var columnLength = definition.filter(function (fieldDefinition) {
        return !_react2.default.isValidElement(fieldDefinition);
      }).length;

      return definition.map(function (inputOptions, i) {
        return _this2.renderDefinition(inputOptions, columnLength, i === definition.length - 1);
      });
    }
  }, {
    key: "renderType",
    value: function renderType(definition) {
      var columnLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var isLast = arguments[2];

      var fieldTypeName = definition.fieldType;
      var FieldTypeComponent = _FieldTypes2.default[fieldTypeName];
      var props = this.props;
      var columnWidth = void 0;

      if (definition.columnWidth == null) {
        var maxColumnWidth = props.maxColumnWidth;
        columnWidth = Math.floor(maxColumnWidth / columnLength);
        if (isLast) {
          columnWidth += maxColumnWidth % columnLength;
        }
      } else {
        columnWidth = definition.columnWidth;
      }

      var key = definition.key;
      // Fallback to using name, if no key provided
      if (key == null) {
        key = definition.name;
      }

      return _react2.default.createElement(FieldTypeComponent, (0, _extends3.default)({}, _Util2.default.exclude(props, "definition"), _Util2.default.exclude(definition, "value", "fieldType", "key"), {
        key: key,
        startValue: props.currentValue[definition.name],
        type: definition.fieldType,
        columnWidth: columnWidth
      }));
    }
  }, {
    key: "renderDefinition",
    value: function renderDefinition(definition, columnLength, isLast) {
      if (_Util2.default.isArray(definition)) {
        return this.renderGroup(definition);
      }

      if (_react2.default.isValidElement(definition)) {
        return definition;
      }

      return this.renderType(definition, columnLength, isLast);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var content = this.renderDefinition(props.definition);

      if (_Util2.default.isArray(content)) {
        content = _Util2.default.flatten(content);
      }

      return _react2.default.createElement(
        "div",
        { className: (0, _dedupe2.default)(props.formRowClass) },
        content
      );
    }
  }]);
  return FormControl;
}(_react2.default.Component);

FormControl.propTypes = {
  // Optional number of columns in the grid
  maxColumnWidth: _propTypes2.default.number,

  // Object with key as field propterty name, and value as current value
  currentValue: _propTypes2.default.object,

  // Form definition to build the form from. Can be either:
  // 1. Array of field definitions will be created on same row
  // 2. Field definition (object) will create a single field in that row
  definition: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array])
};

module.exports = FormControl;