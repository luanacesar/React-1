"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IconInfo = function (_React$Component) {
  (0, _inherits3.default)(IconInfo, _React$Component);

  function IconInfo() {
    (0, _classCallCheck3.default)(this, IconInfo);
    return (0, _possibleConstructorReturn3.default)(this, (IconInfo.__proto__ || (0, _getPrototypeOf2.default)(IconInfo)).apply(this, arguments));
  }

  (0, _createClass3.default)(IconInfo, [{
    key: "render",
    value: function render() {
      return _react2.default.createElement(
        "svg",
        (0, _extends3.default)({
          className: "icon-edit",
          height: "16px",
          viewBox: "0 0 16 16",
          width: "16px"
        }, this.props),
        _react2.default.createElement(
          "title",
          null,
          "icon-edit"
        ),
        _react2.default.createElement("path", { d: "M5.3988464,13.3443403 L15,3.74318674 L12.2568133,1 L2.65565966,10.6011536 L1,15 L5.3988464,13.3443403 L5.3988464,13.3443403 Z" })
      );
    }
  }]);
  return IconInfo;
}(_react2.default.Component);

module.exports = IconInfo;